import java.io.*;
import java.util.*;
import org.objectweb.asm.*;
// import org.objectweb.asm.attrs.*;
public class ParserDump implements Opcodes {

public static void main(String args[]) {
	try {
	FileOutputStream out = new FileOutputStream("Parser.class");
	out.write(dump());
	out.close();
	System.out.println("done writing");
	} catch (Exception e) {
		System.out.println("trouble: "+e);
	}
}

public static byte[] dump () throws Exception {

ClassWriter cw = new ClassWriter(ClassWriter.COMPUTE_FRAMES);
FieldVisitor fv;
MethodVisitor mv;
AnnotationVisitor av0;

cw.visit(V1_6, ACC_PUBLIC + ACC_SUPER, "Parser", null, "Pegasm", null);

cw.visitSource("Parser.java", null);

{
mv = cw.visitMethod(ACC_PUBLIC, "<init>", "()V", null, null);
mv.visitCode();
Label l0 = new Label();
mv.visitLabel(l0);
mv.visitLineNumber(8, l0);
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKESPECIAL, "Pegasm", "<init>", "()V");
mv.visitInsn(RETURN);
Label l1 = new Label();
mv.visitLabel(l1);
mv.visitLocalVariable("this", "LParser;", null, l0, l1, 0);
mv.visitMaxs(1, 1);
mv.visitEnd();
}
{
mv = cw.visitMethod(0, "Grammar", "()Z", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitLdcInsn("Grammar");
mv.visitMethodInsn(INVOKEVIRTUAL, "Parser", "mark", "(Ljava/lang/String;)V");
Label l0 = new Label();
mv.visitLabel(l0);
mv.visitLineNumber(11, l0);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "Parser", "pos", "I");
mv.visitVarInsn(ISTORE, 1);
Label l1 = new Label();
mv.visitLabel(l1);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKESPECIAL, "Parser", "Spacing", "()Z");
Label l2 = new Label();
mv.visitJumpInsn(IFEQ, l2);
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKEVIRTUAL, "Parser", "Grammar_Many", "()Z");
mv.visitJumpInsn(IFEQ, l2);
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKEVIRTUAL, "Parser", "EndOfFile", "()Z");
mv.visitJumpInsn(IFEQ, l2);
mv.visitInsn(ICONST_1);
Label l3 = new Label();
mv.visitJumpInsn(GOTO, l3);
mv.visitLabel(l2);
mv.visitFrame(Opcodes.F_NEW, 2, new Object[] {"Parser", Opcodes.INTEGER}, 1, new Object[] {"Parser"});
mv.visitInsn(ICONST_0);
mv.visitLabel(l3);
mv.visitFrame(Opcodes.F_NEW, 2, new Object[] {"Parser", Opcodes.INTEGER}, 2, new Object[] {"Parser", Opcodes.INTEGER});
mv.visitVarInsn(ILOAD, 1);
mv.visitMethodInsn(INVOKEVIRTUAL, "Parser", "be", "(ZI)Z");
mv.visitInsn(IRETURN);
Label l4 = new Label();
mv.visitLabel(l4);
mv.visitLocalVariable("this", "LParser;", null, l0, l4, 0);
mv.visitLocalVariable("at", "I", null, l1, l4, 1);
mv.visitMaxs(3, 2);
mv.visitEnd();
}
{
mv = cw.visitMethod(0, "Grammar_Many", "()Z", null, null);
mv.visitCode();
Label l0 = new Label();
mv.visitLabel(l0);
mv.visitLineNumber(12, l0);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "Parser", "pos", "I");
mv.visitVarInsn(ISTORE, 1);
Label l1 = new Label();
mv.visitLabel(l1);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKEVIRTUAL, "Parser", "Definition", "()Z");
Label l2 = new Label();
mv.visitJumpInsn(IFEQ, l2);
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKEVIRTUAL, "Parser", "Grammar_Any", "()Z");
mv.visitJumpInsn(IFEQ, l2);
mv.visitInsn(ICONST_1);
Label l3 = new Label();
mv.visitJumpInsn(GOTO, l3);
mv.visitLabel(l2);
mv.visitFrame(Opcodes.F_NEW, 2, new Object[] {"Parser", Opcodes.INTEGER}, 1, new Object[] {"Parser"});
mv.visitInsn(ICONST_0);
mv.visitLabel(l3);
mv.visitFrame(Opcodes.F_NEW, 2, new Object[] {"Parser", Opcodes.INTEGER}, 2, new Object[] {"Parser", Opcodes.INTEGER});
mv.visitVarInsn(ILOAD, 1);
mv.visitMethodInsn(INVOKEVIRTUAL, "Parser", "be", "(ZI)Z");
mv.visitInsn(IRETURN);
Label l4 = new Label();
mv.visitLabel(l4);
mv.visitLocalVariable("this", "LParser;", null, l0, l4, 0);
mv.visitLocalVariable("at", "I", null, l1, l4, 1);
mv.visitMaxs(3, 2);
mv.visitEnd();
}
{
mv = cw.visitMethod(0, "Grammar_Any", "()Z", null, null);
mv.visitCode();
Label l0 = new Label();
mv.visitLabel(l0);
mv.visitLineNumber(13, l0);
mv.visitFrame(Opcodes.F_NEW, 1, new Object[] {"Parser"}, 0, new Object[] {});
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKEVIRTUAL, "Parser", "Definition", "()Z");
Label l1 = new Label();
mv.visitJumpInsn(IFEQ, l1);
mv.visitJumpInsn(GOTO, l0);
mv.visitLabel(l1);
mv.visitFrame(Opcodes.F_NEW, 1, new Object[] {"Parser"}, 0, new Object[] {});
mv.visitInsn(ICONST_1);
mv.visitInsn(IRETURN);
Label l2 = new Label();
mv.visitLabel(l2);
mv.visitLocalVariable("this", "LParser;", null, l0, l2, 0);
mv.visitMaxs(1, 1);
mv.visitEnd();
}
{
mv = cw.visitMethod(0, "Definition", "()Z", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitLdcInsn("Definition");
mv.visitMethodInsn(INVOKEVIRTUAL, "Parser", "mark", "(Ljava/lang/String;)V");
Label l0 = new Label();
mv.visitLabel(l0);
mv.visitLineNumber(16, l0);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "Parser", "pos", "I");
mv.visitVarInsn(ISTORE, 1);
Label l1 = new Label();
mv.visitLabel(l1);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKEVIRTUAL, "Parser", "Identifier", "()Z");
Label l2 = new Label();
mv.visitJumpInsn(IFEQ, l2);
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKEVIRTUAL, "Parser", "LEFTARROW", "()Z");
mv.visitJumpInsn(IFEQ, l2);
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKEVIRTUAL, "Parser", "Expression", "()Z");
mv.visitJumpInsn(IFEQ, l2);
mv.visitInsn(ICONST_1);
Label l3 = new Label();
mv.visitJumpInsn(GOTO, l3);
mv.visitLabel(l2);
mv.visitFrame(Opcodes.F_NEW, 2, new Object[] {"Parser", Opcodes.INTEGER}, 1, new Object[] {"Parser"});
mv.visitInsn(ICONST_0);
mv.visitLabel(l3);
mv.visitFrame(Opcodes.F_NEW, 2, new Object[] {"Parser", Opcodes.INTEGER}, 2, new Object[] {"Parser", Opcodes.INTEGER});
mv.visitVarInsn(ILOAD, 1);
mv.visitMethodInsn(INVOKEVIRTUAL, "Parser", "be", "(ZI)Z");
mv.visitInsn(IRETURN);
Label l4 = new Label();
mv.visitLabel(l4);
mv.visitLocalVariable("this", "LParser;", null, l0, l4, 0);
mv.visitLocalVariable("at", "I", null, l1, l4, 1);
mv.visitMaxs(3, 2);
mv.visitEnd();
}
{
mv = cw.visitMethod(0, "Expression", "()Z", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitLdcInsn("Expression");
mv.visitMethodInsn(INVOKEVIRTUAL, "Parser", "mark", "(Ljava/lang/String;)V");
Label l0 = new Label();
mv.visitLabel(l0);
mv.visitLineNumber(19, l0);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "Parser", "pos", "I");
mv.visitVarInsn(ISTORE, 1);
Label l1 = new Label();
mv.visitLabel(l1);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKEVIRTUAL, "Parser", "Sequence", "()Z");
Label l2 = new Label();
mv.visitJumpInsn(IFEQ, l2);
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKEVIRTUAL, "Parser", "Expression_Any", "()Z");
mv.visitJumpInsn(IFEQ, l2);
mv.visitInsn(ICONST_1);
Label l3 = new Label();
mv.visitJumpInsn(GOTO, l3);
mv.visitLabel(l2);
mv.visitFrame(Opcodes.F_NEW, 2, new Object[] {"Parser", Opcodes.INTEGER}, 1, new Object[] {"Parser"});
mv.visitInsn(ICONST_0);
mv.visitLabel(l3);
mv.visitFrame(Opcodes.F_NEW, 2, new Object[] {"Parser", Opcodes.INTEGER}, 2, new Object[] {"Parser", Opcodes.INTEGER});
mv.visitVarInsn(ILOAD, 1);
mv.visitMethodInsn(INVOKEVIRTUAL, "Parser", "be", "(ZI)Z");
mv.visitInsn(IRETURN);
Label l4 = new Label();
mv.visitLabel(l4);
mv.visitLocalVariable("this", "LParser;", null, l0, l4, 0);
mv.visitLocalVariable("at", "I", null, l1, l4, 1);
mv.visitMaxs(3, 2);
mv.visitEnd();
}
{
mv = cw.visitMethod(0, "Expression_Any", "()Z", null, null);
mv.visitCode();
Label l0 = new Label();
mv.visitLabel(l0);
mv.visitLineNumber(20, l0);
mv.visitFrame(Opcodes.F_NEW, 1, new Object[] {"Parser"}, 0, new Object[] {});
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKEVIRTUAL, "Parser", "SLASH", "()Z");
Label l1 = new Label();
mv.visitJumpInsn(IFEQ, l1);
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKEVIRTUAL, "Parser", "Sequence", "()Z");
mv.visitJumpInsn(IFEQ, l1);
mv.visitJumpInsn(GOTO, l0);
mv.visitLabel(l1);
mv.visitFrame(Opcodes.F_NEW, 1, new Object[] {"Parser"}, 0, new Object[] {});
mv.visitInsn(ICONST_1);
mv.visitInsn(IRETURN);
Label l2 = new Label();
mv.visitLabel(l2);
mv.visitLocalVariable("this", "LParser;", null, l0, l2, 0);
mv.visitMaxs(1, 1);
mv.visitEnd();
}
{
mv = cw.visitMethod(0, "Sequence", "()Z", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitLdcInsn("Sequence");
mv.visitMethodInsn(INVOKEVIRTUAL, "Parser", "mark", "(Ljava/lang/String;)V");
Label l0 = new Label();
mv.visitLabel(l0);
mv.visitLineNumber(23, l0);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "Parser", "pos", "I");
mv.visitVarInsn(ISTORE, 1);
Label l1 = new Label();
mv.visitLabel(l1);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKEVIRTUAL, "Parser", "Sequence_Any", "()Z");
mv.visitVarInsn(ILOAD, 1);
mv.visitMethodInsn(INVOKEVIRTUAL, "Parser", "be", "(ZI)Z");
mv.visitInsn(IRETURN);
Label l2 = new Label();
mv.visitLabel(l2);
mv.visitLocalVariable("this", "LParser;", null, l0, l2, 0);
mv.visitLocalVariable("at", "I", null, l1, l2, 1);
mv.visitMaxs(3, 2);
mv.visitEnd();
}
{
mv = cw.visitMethod(0, "Sequence_Any", "()Z", null, null);
mv.visitCode();
Label l0 = new Label();
mv.visitLabel(l0);
mv.visitLineNumber(24, l0);
mv.visitFrame(Opcodes.F_NEW, 1, new Object[] {"Parser"}, 0, new Object[] {});
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKEVIRTUAL, "Parser", "Prefix", "()Z");
Label l1 = new Label();
mv.visitJumpInsn(IFEQ, l1);
mv.visitJumpInsn(GOTO, l0);
mv.visitLabel(l1);
mv.visitFrame(Opcodes.F_NEW, 1, new Object[] {"Parser"}, 0, new Object[] {});
mv.visitInsn(ICONST_1);
mv.visitInsn(IRETURN);
Label l2 = new Label();
mv.visitLabel(l2);
mv.visitLocalVariable("this", "LParser;", null, l0, l2, 0);
mv.visitMaxs(1, 1);
mv.visitEnd();
}
{
mv = cw.visitMethod(0, "Prefix", "()Z", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitLdcInsn("Prefix");
mv.visitMethodInsn(INVOKEVIRTUAL, "Parser", "mark", "(Ljava/lang/String;)V");
Label l0 = new Label();
mv.visitLabel(l0);
mv.visitLineNumber(27, l0);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "Parser", "pos", "I");
mv.visitVarInsn(ISTORE, 1);
Label l1 = new Label();
mv.visitLabel(l1);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKEVIRTUAL, "Parser", "Prefix_Opt", "()Z");
Label l2 = new Label();
mv.visitJumpInsn(IFEQ, l2);
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKEVIRTUAL, "Parser", "Suffix", "()Z");
mv.visitJumpInsn(IFEQ, l2);
mv.visitInsn(ICONST_1);
Label l3 = new Label();
mv.visitJumpInsn(GOTO, l3);
mv.visitLabel(l2);
mv.visitFrame(Opcodes.F_NEW, 2, new Object[] {"Parser", Opcodes.INTEGER}, 1, new Object[] {"Parser"});
mv.visitInsn(ICONST_0);
mv.visitLabel(l3);
mv.visitFrame(Opcodes.F_NEW, 2, new Object[] {"Parser", Opcodes.INTEGER}, 2, new Object[] {"Parser", Opcodes.INTEGER});
mv.visitVarInsn(ILOAD, 1);
mv.visitMethodInsn(INVOKEVIRTUAL, "Parser", "be", "(ZI)Z");
mv.visitInsn(IRETURN);
Label l4 = new Label();
mv.visitLabel(l4);
mv.visitLocalVariable("this", "LParser;", null, l0, l4, 0);
mv.visitLocalVariable("at", "I", null, l1, l4, 1);
mv.visitMaxs(3, 2);
mv.visitEnd();
}
{
mv = cw.visitMethod(0, "Prefix_Opt", "()Z", null, null);
mv.visitCode();
Label l0 = new Label();
mv.visitLabel(l0);
mv.visitLineNumber(28, l0);
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKEVIRTUAL, "Parser", "AND", "()Z");
Label l1 = new Label();
mv.visitJumpInsn(IFNE, l1);
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKEVIRTUAL, "Parser", "NOT", "()Z");
mv.visitJumpInsn(IFEQ, l1);
mv.visitLabel(l1);
mv.visitFrame(Opcodes.F_NEW, 1, new Object[] {"Parser"}, 0, new Object[] {});
mv.visitInsn(ICONST_1);
mv.visitInsn(IRETURN);
Label l2 = new Label();
mv.visitLabel(l2);
mv.visitLocalVariable("this", "LParser;", null, l0, l2, 0);
mv.visitMaxs(1, 1);
mv.visitEnd();
}
{
mv = cw.visitMethod(0, "Suffix", "()Z", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitLdcInsn("Suffix");
mv.visitMethodInsn(INVOKEVIRTUAL, "Parser", "mark", "(Ljava/lang/String;)V");
Label l0 = new Label();
mv.visitLabel(l0);
mv.visitLineNumber(31, l0);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "Parser", "pos", "I");
mv.visitVarInsn(ISTORE, 1);
Label l1 = new Label();
mv.visitLabel(l1);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKEVIRTUAL, "Parser", "Primary", "()Z");
Label l2 = new Label();
mv.visitJumpInsn(IFEQ, l2);
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKEVIRTUAL, "Parser", "Suffix_Opt", "()Z");
mv.visitJumpInsn(IFEQ, l2);
mv.visitInsn(ICONST_1);
Label l3 = new Label();
mv.visitJumpInsn(GOTO, l3);
mv.visitLabel(l2);
mv.visitFrame(Opcodes.F_NEW, 2, new Object[] {"Parser", Opcodes.INTEGER}, 1, new Object[] {"Parser"});
mv.visitInsn(ICONST_0);
mv.visitLabel(l3);
mv.visitFrame(Opcodes.F_NEW, 2, new Object[] {"Parser", Opcodes.INTEGER}, 2, new Object[] {"Parser", Opcodes.INTEGER});
mv.visitVarInsn(ILOAD, 1);
mv.visitMethodInsn(INVOKEVIRTUAL, "Parser", "be", "(ZI)Z");
mv.visitInsn(IRETURN);
Label l4 = new Label();
mv.visitLabel(l4);
mv.visitLocalVariable("this", "LParser;", null, l0, l4, 0);
mv.visitLocalVariable("at", "I", null, l1, l4, 1);
mv.visitMaxs(3, 2);
mv.visitEnd();
}
{
mv = cw.visitMethod(0, "Suffix_Opt", "()Z", null, null);
mv.visitCode();
Label l0 = new Label();
mv.visitLabel(l0);
mv.visitLineNumber(32, l0);
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKEVIRTUAL, "Parser", "QUESTION", "()Z");
Label l1 = new Label();
mv.visitJumpInsn(IFNE, l1);
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKEVIRTUAL, "Parser", "STAR", "()Z");
mv.visitJumpInsn(IFNE, l1);
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKEVIRTUAL, "Parser", "PLUS", "()Z");
mv.visitJumpInsn(IFEQ, l1);
mv.visitLabel(l1);
mv.visitFrame(Opcodes.F_NEW, 1, new Object[] {"Parser"}, 0, new Object[] {});
mv.visitInsn(ICONST_1);
mv.visitInsn(IRETURN);
Label l2 = new Label();
mv.visitLabel(l2);
mv.visitLocalVariable("this", "LParser;", null, l0, l2, 0);
mv.visitMaxs(1, 1);
mv.visitEnd();
}
{
mv = cw.visitMethod(0, "Primary", "()Z", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitLdcInsn("Primary");
mv.visitMethodInsn(INVOKEVIRTUAL, "Parser", "mark", "(Ljava/lang/String;)V");
Label l0 = new Label();
mv.visitLabel(l0);
mv.visitLineNumber(35, l0);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "Parser", "pos", "I");
mv.visitVarInsn(ISTORE, 1);
Label l1 = new Label();
mv.visitLabel(l1);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKEVIRTUAL, "Parser", "Primary_Seq", "()Z");
Label l2 = new Label();
mv.visitJumpInsn(IFNE, l2);
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKEVIRTUAL, "Parser", "OPEN", "()Z");
Label l3 = new Label();
mv.visitJumpInsn(IFEQ, l3);
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKEVIRTUAL, "Parser", "Expression", "()Z");
mv.visitJumpInsn(IFEQ, l3);
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKEVIRTUAL, "Parser", "CLOSE", "()Z");
mv.visitJumpInsn(IFNE, l2);
mv.visitLabel(l3);
mv.visitFrame(Opcodes.F_NEW, 2, new Object[] {"Parser", Opcodes.INTEGER}, 1, new Object[] {"Parser"});
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKEVIRTUAL, "Parser", "Literal", "()Z");
mv.visitJumpInsn(IFNE, l2);
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKEVIRTUAL, "Parser", "Klass", "()Z");
mv.visitJumpInsn(IFNE, l2);
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKEVIRTUAL, "Parser", "DOT", "()Z");
Label l4 = new Label();
mv.visitJumpInsn(IFEQ, l4);
mv.visitLabel(l2);
mv.visitFrame(Opcodes.F_NEW, 2, new Object[] {"Parser", Opcodes.INTEGER}, 1, new Object[] {"Parser"});
mv.visitInsn(ICONST_1);
Label l5 = new Label();
mv.visitJumpInsn(GOTO, l5);
mv.visitLabel(l4);
mv.visitFrame(Opcodes.F_NEW, 2, new Object[] {"Parser", Opcodes.INTEGER}, 1, new Object[] {"Parser"});
mv.visitInsn(ICONST_0);
mv.visitLabel(l5);
mv.visitFrame(Opcodes.F_NEW, 2, new Object[] {"Parser", Opcodes.INTEGER}, 2, new Object[] {"Parser", Opcodes.INTEGER});
mv.visitVarInsn(ILOAD, 1);
mv.visitMethodInsn(INVOKEVIRTUAL, "Parser", "be", "(ZI)Z");
mv.visitInsn(IRETURN);
Label l6 = new Label();
mv.visitLabel(l6);
mv.visitLocalVariable("this", "LParser;", null, l0, l6, 0);
mv.visitLocalVariable("at", "I", null, l1, l6, 1);
mv.visitMaxs(3, 2);
mv.visitEnd();
}
{
mv = cw.visitMethod(0, "Primary_Seq", "()Z", null, null);
mv.visitCode();
Label l0 = new Label();
mv.visitLabel(l0);
mv.visitLineNumber(36, l0);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "Parser", "pos", "I");
mv.visitVarInsn(ISTORE, 1);
Label l1 = new Label();
mv.visitLabel(l1);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKEVIRTUAL, "Parser", "Identifier", "()Z");
Label l2 = new Label();
mv.visitJumpInsn(IFEQ, l2);
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKEVIRTUAL, "Parser", "Primary_Not", "()Z");
mv.visitJumpInsn(IFEQ, l2);
mv.visitInsn(ICONST_1);
Label l3 = new Label();
mv.visitJumpInsn(GOTO, l3);
mv.visitLabel(l2);
mv.visitFrame(Opcodes.F_NEW, 2, new Object[] {"Parser", Opcodes.INTEGER}, 1, new Object[] {"Parser"});
mv.visitInsn(ICONST_0);
mv.visitLabel(l3);
mv.visitFrame(Opcodes.F_NEW, 2, new Object[] {"Parser", Opcodes.INTEGER}, 2, new Object[] {"Parser", Opcodes.INTEGER});
mv.visitVarInsn(ILOAD, 1);
mv.visitMethodInsn(INVOKEVIRTUAL, "Parser", "be", "(ZI)Z");
mv.visitInsn(IRETURN);
Label l4 = new Label();
mv.visitLabel(l4);
mv.visitLocalVariable("this", "LParser;", null, l0, l4, 0);
mv.visitLocalVariable("at", "I", null, l1, l4, 1);
mv.visitMaxs(3, 2);
mv.visitEnd();
}
{
mv = cw.visitMethod(0, "Primary_Not", "()Z", null, null);
mv.visitCode();
Label l0 = new Label();
mv.visitLabel(l0);
mv.visitLineNumber(37, l0);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "Parser", "pos", "I");
mv.visitVarInsn(ISTORE, 1);
Label l1 = new Label();
mv.visitLabel(l1);
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKEVIRTUAL, "Parser", "LEFTARROW", "()Z");
Label l2 = new Label();
mv.visitJumpInsn(IFNE, l2);
mv.visitInsn(ICONST_1);
Label l3 = new Label();
mv.visitJumpInsn(GOTO, l3);
mv.visitLabel(l2);
mv.visitFrame(Opcodes.F_NEW, 2, new Object[] {"Parser", Opcodes.INTEGER}, 0, new Object[] {});
mv.visitInsn(ICONST_0);
mv.visitLabel(l3);
mv.visitFrame(Opcodes.F_NEW, 2, new Object[] {"Parser", Opcodes.INTEGER}, 1, new Object[] {Opcodes.INTEGER});
mv.visitVarInsn(ISTORE, 2);
Label l4 = new Label();
mv.visitLabel(l4);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ILOAD, 1);
mv.visitFieldInsn(PUTFIELD, "Parser", "pos", "I");
mv.visitVarInsn(ILOAD, 2);
mv.visitInsn(IRETURN);
Label l5 = new Label();
mv.visitLabel(l5);
mv.visitLocalVariable("this", "LParser;", null, l0, l5, 0);
mv.visitLocalVariable("at", "I", null, l1, l5, 1);
mv.visitLocalVariable("b", "Z", null, l4, l5, 2);
mv.visitMaxs(2, 3);
mv.visitEnd();
}
{
mv = cw.visitMethod(0, "Identifier", "()Z", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitLdcInsn("Identifier");
mv.visitMethodInsn(INVOKEVIRTUAL, "Parser", "mark", "(Ljava/lang/String;)V");
Label l0 = new Label();
mv.visitLabel(l0);
mv.visitLineNumber(40, l0);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "Parser", "pos", "I");
mv.visitVarInsn(ISTORE, 1);
Label l1 = new Label();
mv.visitLabel(l1);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKESPECIAL, "Parser", "IdentStart", "()Z");
Label l2 = new Label();
mv.visitJumpInsn(IFEQ, l2);
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKEVIRTUAL, "Parser", "Identifier_Any", "()Z");
mv.visitJumpInsn(IFEQ, l2);
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKESPECIAL, "Parser", "Spacing", "()Z");
mv.visitJumpInsn(IFEQ, l2);
mv.visitInsn(ICONST_1);
Label l3 = new Label();
mv.visitJumpInsn(GOTO, l3);
mv.visitLabel(l2);
mv.visitFrame(Opcodes.F_NEW, 2, new Object[] {"Parser", Opcodes.INTEGER}, 1, new Object[] {"Parser"});
mv.visitInsn(ICONST_0);
mv.visitLabel(l3);
mv.visitFrame(Opcodes.F_NEW, 2, new Object[] {"Parser", Opcodes.INTEGER}, 2, new Object[] {"Parser", Opcodes.INTEGER});
mv.visitVarInsn(ILOAD, 1);
mv.visitMethodInsn(INVOKEVIRTUAL, "Parser", "be", "(ZI)Z");
mv.visitInsn(IRETURN);
Label l4 = new Label();
mv.visitLabel(l4);
mv.visitLocalVariable("this", "LParser;", null, l0, l4, 0);
mv.visitLocalVariable("at", "I", null, l1, l4, 1);
mv.visitMaxs(3, 2);
mv.visitEnd();
}
{
mv = cw.visitMethod(0, "Identifier_Any", "()Z", null, null);
mv.visitCode();
Label l0 = new Label();
mv.visitLabel(l0);
mv.visitLineNumber(41, l0);
mv.visitFrame(Opcodes.F_NEW, 1, new Object[] {"Parser"}, 0, new Object[] {});
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKESPECIAL, "Parser", "IdentCont", "()Z");
Label l1 = new Label();
mv.visitJumpInsn(IFEQ, l1);
mv.visitJumpInsn(GOTO, l0);
mv.visitLabel(l1);
mv.visitFrame(Opcodes.F_NEW, 1, new Object[] {"Parser"}, 0, new Object[] {});
mv.visitInsn(ICONST_1);
mv.visitInsn(IRETURN);
Label l2 = new Label();
mv.visitLabel(l2);
mv.visitLocalVariable("this", "LParser;", null, l0, l2, 0);
mv.visitMaxs(1, 1);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PRIVATE, "IdentStart", "()Z", null, null);
mv.visitCode();
Label l0 = new Label();
mv.visitLabel(l0);
mv.visitLineNumber(44, l0);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "Parser", "pos", "I");
mv.visitVarInsn(ISTORE, 1);
Label l1 = new Label();
mv.visitLabel(l1);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ALOAD, 0);
mv.visitIntInsn(BIPUSH, 97);
mv.visitIntInsn(BIPUSH, 122);
mv.visitMethodInsn(INVOKEVIRTUAL, "Parser", "range", "(CC)Z");
Label l2 = new Label();
mv.visitJumpInsn(IFNE, l2);
mv.visitVarInsn(ALOAD, 0);
mv.visitIntInsn(BIPUSH, 65);
mv.visitIntInsn(BIPUSH, 90);
mv.visitMethodInsn(INVOKEVIRTUAL, "Parser", "range", "(CC)Z");
mv.visitJumpInsn(IFNE, l2);
mv.visitVarInsn(ALOAD, 0);
mv.visitLdcInsn("_");
mv.visitMethodInsn(INVOKEVIRTUAL, "Parser", "match", "(Ljava/lang/String;)Z");
Label l3 = new Label();
mv.visitJumpInsn(IFEQ, l3);
mv.visitLabel(l2);
mv.visitFrame(Opcodes.F_NEW, 2, new Object[] {"Parser", Opcodes.INTEGER}, 1, new Object[] {"Parser"});
mv.visitInsn(ICONST_1);
Label l4 = new Label();
mv.visitJumpInsn(GOTO, l4);
mv.visitLabel(l3);
mv.visitFrame(Opcodes.F_NEW, 2, new Object[] {"Parser", Opcodes.INTEGER}, 1, new Object[] {"Parser"});
mv.visitInsn(ICONST_0);
mv.visitLabel(l4);
mv.visitFrame(Opcodes.F_NEW, 2, new Object[] {"Parser", Opcodes.INTEGER}, 2, new Object[] {"Parser", Opcodes.INTEGER});
mv.visitVarInsn(ILOAD, 1);
mv.visitMethodInsn(INVOKEVIRTUAL, "Parser", "be", "(ZI)Z");
mv.visitInsn(IRETURN);
Label l5 = new Label();
mv.visitLabel(l5);
mv.visitLocalVariable("this", "LParser;", null, l0, l5, 0);
mv.visitLocalVariable("at", "I", null, l1, l5, 1);
mv.visitMaxs(4, 2);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PRIVATE, "IdentCont", "()Z", null, null);
mv.visitCode();
Label l0 = new Label();
mv.visitLabel(l0);
mv.visitLineNumber(47, l0);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "Parser", "pos", "I");
mv.visitVarInsn(ISTORE, 1);
Label l1 = new Label();
mv.visitLabel(l1);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKESPECIAL, "Parser", "IdentStart", "()Z");
Label l2 = new Label();
mv.visitJumpInsn(IFNE, l2);
mv.visitVarInsn(ALOAD, 0);
mv.visitIntInsn(BIPUSH, 48);
mv.visitIntInsn(BIPUSH, 57);
mv.visitMethodInsn(INVOKEVIRTUAL, "Parser", "range", "(CC)Z");
Label l3 = new Label();
mv.visitJumpInsn(IFEQ, l3);
mv.visitLabel(l2);
mv.visitFrame(Opcodes.F_NEW, 2, new Object[] {"Parser", Opcodes.INTEGER}, 1, new Object[] {"Parser"});
mv.visitInsn(ICONST_1);
Label l4 = new Label();
mv.visitJumpInsn(GOTO, l4);
mv.visitLabel(l3);
mv.visitFrame(Opcodes.F_NEW, 2, new Object[] {"Parser", Opcodes.INTEGER}, 1, new Object[] {"Parser"});
mv.visitInsn(ICONST_0);
mv.visitLabel(l4);
mv.visitFrame(Opcodes.F_NEW, 2, new Object[] {"Parser", Opcodes.INTEGER}, 2, new Object[] {"Parser", Opcodes.INTEGER});
mv.visitVarInsn(ILOAD, 1);
mv.visitMethodInsn(INVOKEVIRTUAL, "Parser", "be", "(ZI)Z");
mv.visitInsn(IRETURN);
Label l5 = new Label();
mv.visitLabel(l5);
mv.visitLocalVariable("this", "LParser;", null, l0, l5, 0);
mv.visitLocalVariable("at", "I", null, l1, l5, 1);
mv.visitMaxs(4, 2);
mv.visitEnd();
}
{
mv = cw.visitMethod(0, "Literal", "()Z", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitLdcInsn("Literal");
mv.visitMethodInsn(INVOKEVIRTUAL, "Parser", "mark", "(Ljava/lang/String;)V");
Label l0 = new Label();
mv.visitLabel(l0);
mv.visitLineNumber(50, l0);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "Parser", "pos", "I");
mv.visitVarInsn(ISTORE, 1);
Label l1 = new Label();
mv.visitLabel(l1);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ALOAD, 0);
mv.visitLdcInsn("'");
mv.visitMethodInsn(INVOKEVIRTUAL, "Parser", "chars", "(Ljava/lang/String;)Z");
Label l2 = new Label();
mv.visitJumpInsn(IFEQ, l2);
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKEVIRTUAL, "Parser", "Literal_Any1", "()Z");
mv.visitJumpInsn(IFEQ, l2);
mv.visitVarInsn(ALOAD, 0);
mv.visitLdcInsn("'");
mv.visitMethodInsn(INVOKEVIRTUAL, "Parser", "chars", "(Ljava/lang/String;)Z");
mv.visitJumpInsn(IFEQ, l2);
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKESPECIAL, "Parser", "Spacing", "()Z");
Label l3 = new Label();
mv.visitJumpInsn(IFNE, l3);
mv.visitLabel(l2);
mv.visitFrame(Opcodes.F_NEW, 2, new Object[] {"Parser", Opcodes.INTEGER}, 1, new Object[] {"Parser"});
mv.visitVarInsn(ALOAD, 0);
mv.visitLdcInsn("\"");
mv.visitMethodInsn(INVOKEVIRTUAL, "Parser", "chars", "(Ljava/lang/String;)Z");
Label l4 = new Label();
mv.visitJumpInsn(IFEQ, l4);
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKEVIRTUAL, "Parser", "Literal_Any2", "()Z");
mv.visitJumpInsn(IFEQ, l4);
mv.visitVarInsn(ALOAD, 0);
mv.visitLdcInsn("\"");
mv.visitMethodInsn(INVOKEVIRTUAL, "Parser", "chars", "(Ljava/lang/String;)Z");
mv.visitJumpInsn(IFEQ, l4);
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKESPECIAL, "Parser", "Spacing", "()Z");
mv.visitJumpInsn(IFEQ, l4);
mv.visitLabel(l3);
mv.visitFrame(Opcodes.F_NEW, 2, new Object[] {"Parser", Opcodes.INTEGER}, 1, new Object[] {"Parser"});
mv.visitInsn(ICONST_1);
Label l5 = new Label();
mv.visitJumpInsn(GOTO, l5);
mv.visitLabel(l4);
mv.visitFrame(Opcodes.F_NEW, 2, new Object[] {"Parser", Opcodes.INTEGER}, 1, new Object[] {"Parser"});
mv.visitInsn(ICONST_0);
mv.visitLabel(l5);
mv.visitFrame(Opcodes.F_NEW, 2, new Object[] {"Parser", Opcodes.INTEGER}, 2, new Object[] {"Parser", Opcodes.INTEGER});
mv.visitVarInsn(ILOAD, 1);
mv.visitMethodInsn(INVOKEVIRTUAL, "Parser", "be", "(ZI)Z");
mv.visitInsn(IRETURN);
Label l6 = new Label();
mv.visitLabel(l6);
mv.visitLocalVariable("this", "LParser;", null, l0, l6, 0);
mv.visitLocalVariable("at", "I", null, l1, l6, 1);
mv.visitMaxs(3, 2);
mv.visitEnd();
}
{
mv = cw.visitMethod(0, "Literal_Any1", "()Z", null, null);
mv.visitCode();
Label l0 = new Label();
mv.visitLabel(l0);
mv.visitLineNumber(51, l0);
mv.visitFrame(Opcodes.F_NEW, 1, new Object[] {"Parser"}, 0, new Object[] {});
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKEVIRTUAL, "Parser", "Literal_Not1", "()Z");
Label l1 = new Label();
mv.visitJumpInsn(IFEQ, l1);
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKEVIRTUAL, "Parser", "Char", "()Z");
mv.visitJumpInsn(IFEQ, l1);
mv.visitJumpInsn(GOTO, l0);
mv.visitLabel(l1);
mv.visitFrame(Opcodes.F_NEW, 1, new Object[] {"Parser"}, 0, new Object[] {});
mv.visitInsn(ICONST_1);
mv.visitInsn(IRETURN);
Label l2 = new Label();
mv.visitLabel(l2);
mv.visitLocalVariable("this", "LParser;", null, l0, l2, 0);
mv.visitMaxs(1, 1);
mv.visitEnd();
}
{
mv = cw.visitMethod(0, "Literal_Any2", "()Z", null, null);
mv.visitCode();
Label l0 = new Label();
mv.visitLabel(l0);
mv.visitLineNumber(52, l0);
mv.visitFrame(Opcodes.F_NEW, 1, new Object[] {"Parser"}, 0, new Object[] {});
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKEVIRTUAL, "Parser", "Literal_Not2", "()Z");
Label l1 = new Label();
mv.visitJumpInsn(IFEQ, l1);
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKEVIRTUAL, "Parser", "Char", "()Z");
mv.visitJumpInsn(IFEQ, l1);
mv.visitJumpInsn(GOTO, l0);
mv.visitLabel(l1);
mv.visitFrame(Opcodes.F_NEW, 1, new Object[] {"Parser"}, 0, new Object[] {});
mv.visitInsn(ICONST_1);
mv.visitInsn(IRETURN);
Label l2 = new Label();
mv.visitLabel(l2);
mv.visitLocalVariable("this", "LParser;", null, l0, l2, 0);
mv.visitMaxs(1, 1);
mv.visitEnd();
}
{
mv = cw.visitMethod(0, "Literal_Not1", "()Z", null, null);
mv.visitCode();
Label l0 = new Label();
mv.visitLabel(l0);
mv.visitLineNumber(53, l0);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "Parser", "pos", "I");
mv.visitVarInsn(ISTORE, 1);
Label l1 = new Label();
mv.visitLabel(l1);
mv.visitVarInsn(ALOAD, 0);
mv.visitLdcInsn("'");
mv.visitMethodInsn(INVOKEVIRTUAL, "Parser", "chars", "(Ljava/lang/String;)Z");
Label l2 = new Label();
mv.visitJumpInsn(IFNE, l2);
mv.visitInsn(ICONST_1);
Label l3 = new Label();
mv.visitJumpInsn(GOTO, l3);
mv.visitLabel(l2);
mv.visitFrame(Opcodes.F_NEW, 2, new Object[] {"Parser", Opcodes.INTEGER}, 0, new Object[] {});
mv.visitInsn(ICONST_0);
mv.visitLabel(l3);
mv.visitFrame(Opcodes.F_NEW, 2, new Object[] {"Parser", Opcodes.INTEGER}, 1, new Object[] {Opcodes.INTEGER});
mv.visitVarInsn(ISTORE, 2);
Label l4 = new Label();
mv.visitLabel(l4);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ILOAD, 1);
mv.visitFieldInsn(PUTFIELD, "Parser", "pos", "I");
mv.visitVarInsn(ILOAD, 2);
mv.visitInsn(IRETURN);
Label l5 = new Label();
mv.visitLabel(l5);
mv.visitLocalVariable("this", "LParser;", null, l0, l5, 0);
mv.visitLocalVariable("at", "I", null, l1, l5, 1);
mv.visitLocalVariable("b", "Z", null, l4, l5, 2);
mv.visitMaxs(2, 3);
mv.visitEnd();
}
{
mv = cw.visitMethod(0, "Literal_Not2", "()Z", null, null);
mv.visitCode();
Label l0 = new Label();
mv.visitLabel(l0);
mv.visitLineNumber(54, l0);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "Parser", "pos", "I");
mv.visitVarInsn(ISTORE, 1);
Label l1 = new Label();
mv.visitLabel(l1);
mv.visitVarInsn(ALOAD, 0);
mv.visitLdcInsn("\"");
mv.visitMethodInsn(INVOKEVIRTUAL, "Parser", "chars", "(Ljava/lang/String;)Z");
Label l2 = new Label();
mv.visitJumpInsn(IFNE, l2);
mv.visitInsn(ICONST_1);
Label l3 = new Label();
mv.visitJumpInsn(GOTO, l3);
mv.visitLabel(l2);
mv.visitFrame(Opcodes.F_NEW, 2, new Object[] {"Parser", Opcodes.INTEGER}, 0, new Object[] {});
mv.visitInsn(ICONST_0);
mv.visitLabel(l3);
mv.visitFrame(Opcodes.F_NEW, 2, new Object[] {"Parser", Opcodes.INTEGER}, 1, new Object[] {Opcodes.INTEGER});
mv.visitVarInsn(ISTORE, 2);
Label l4 = new Label();
mv.visitLabel(l4);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ILOAD, 1);
mv.visitFieldInsn(PUTFIELD, "Parser", "pos", "I");
mv.visitVarInsn(ILOAD, 2);
mv.visitInsn(IRETURN);
Label l5 = new Label();
mv.visitLabel(l5);
mv.visitLocalVariable("this", "LParser;", null, l0, l5, 0);
mv.visitLocalVariable("at", "I", null, l1, l5, 1);
mv.visitLocalVariable("b", "Z", null, l4, l5, 2);
mv.visitMaxs(2, 3);
mv.visitEnd();
}
{
mv = cw.visitMethod(0, "Klass", "()Z", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitLdcInsn("Klass");
mv.visitMethodInsn(INVOKEVIRTUAL, "Parser", "mark", "(Ljava/lang/String;)V");
Label l0 = new Label();
mv.visitLabel(l0);
mv.visitLineNumber(57, l0);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "Parser", "pos", "I");
mv.visitVarInsn(ISTORE, 1);
Label l1 = new Label();
mv.visitLabel(l1);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ALOAD, 0);
mv.visitLdcInsn("[");
mv.visitMethodInsn(INVOKEVIRTUAL, "Parser", "match", "(Ljava/lang/String;)Z");
Label l2 = new Label();
mv.visitJumpInsn(IFEQ, l2);
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKEVIRTUAL, "Parser", "Klass_Any", "()Z");
mv.visitJumpInsn(IFEQ, l2);
mv.visitVarInsn(ALOAD, 0);
mv.visitLdcInsn("]");
mv.visitMethodInsn(INVOKEVIRTUAL, "Parser", "match", "(Ljava/lang/String;)Z");
mv.visitJumpInsn(IFEQ, l2);
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKESPECIAL, "Parser", "Spacing", "()Z");
mv.visitJumpInsn(IFEQ, l2);
mv.visitInsn(ICONST_1);
Label l3 = new Label();
mv.visitJumpInsn(GOTO, l3);
mv.visitLabel(l2);
mv.visitFrame(Opcodes.F_NEW, 2, new Object[] {"Parser", Opcodes.INTEGER}, 1, new Object[] {"Parser"});
mv.visitInsn(ICONST_0);
mv.visitLabel(l3);
mv.visitFrame(Opcodes.F_NEW, 2, new Object[] {"Parser", Opcodes.INTEGER}, 2, new Object[] {"Parser", Opcodes.INTEGER});
mv.visitVarInsn(ILOAD, 1);
mv.visitMethodInsn(INVOKEVIRTUAL, "Parser", "be", "(ZI)Z");
mv.visitInsn(IRETURN);
Label l4 = new Label();
mv.visitLabel(l4);
mv.visitLocalVariable("this", "LParser;", null, l0, l4, 0);
mv.visitLocalVariable("at", "I", null, l1, l4, 1);
mv.visitMaxs(3, 2);
mv.visitEnd();
}
{
mv = cw.visitMethod(0, "Klass_Any", "()Z", null, null);
mv.visitCode();
Label l0 = new Label();
mv.visitLabel(l0);
mv.visitLineNumber(58, l0);
mv.visitFrame(Opcodes.F_NEW, 1, new Object[] {"Parser"}, 0, new Object[] {});
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKEVIRTUAL, "Parser", "Klass_Not", "()Z");
Label l1 = new Label();
mv.visitJumpInsn(IFEQ, l1);
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKEVIRTUAL, "Parser", "Range", "()Z");
mv.visitJumpInsn(IFEQ, l1);
mv.visitJumpInsn(GOTO, l0);
mv.visitLabel(l1);
mv.visitFrame(Opcodes.F_NEW, 1, new Object[] {"Parser"}, 0, new Object[] {});
mv.visitInsn(ICONST_1);
mv.visitInsn(IRETURN);
Label l2 = new Label();
mv.visitLabel(l2);
mv.visitLocalVariable("this", "LParser;", null, l0, l2, 0);
mv.visitMaxs(1, 1);
mv.visitEnd();
}
{
mv = cw.visitMethod(0, "Klass_Not", "()Z", null, null);
mv.visitCode();
Label l0 = new Label();
mv.visitLabel(l0);
mv.visitLineNumber(59, l0);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "Parser", "pos", "I");
mv.visitVarInsn(ISTORE, 1);
Label l1 = new Label();
mv.visitLabel(l1);
mv.visitVarInsn(ALOAD, 0);
mv.visitLdcInsn("]");
mv.visitMethodInsn(INVOKEVIRTUAL, "Parser", "match", "(Ljava/lang/String;)Z");
Label l2 = new Label();
mv.visitJumpInsn(IFNE, l2);
mv.visitInsn(ICONST_1);
Label l3 = new Label();
mv.visitJumpInsn(GOTO, l3);
mv.visitLabel(l2);
mv.visitFrame(Opcodes.F_NEW, 2, new Object[] {"Parser", Opcodes.INTEGER}, 0, new Object[] {});
mv.visitInsn(ICONST_0);
mv.visitLabel(l3);
mv.visitFrame(Opcodes.F_NEW, 2, new Object[] {"Parser", Opcodes.INTEGER}, 1, new Object[] {Opcodes.INTEGER});
mv.visitVarInsn(ISTORE, 2);
Label l4 = new Label();
mv.visitLabel(l4);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ILOAD, 1);
mv.visitFieldInsn(PUTFIELD, "Parser", "pos", "I");
mv.visitVarInsn(ILOAD, 2);
mv.visitInsn(IRETURN);
Label l5 = new Label();
mv.visitLabel(l5);
mv.visitLocalVariable("this", "LParser;", null, l0, l5, 0);
mv.visitLocalVariable("at", "I", null, l1, l5, 1);
mv.visitLocalVariable("b", "Z", null, l4, l5, 2);
mv.visitMaxs(2, 3);
mv.visitEnd();
}
{
mv = cw.visitMethod(0, "Range", "()Z", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitLdcInsn("Range");
mv.visitMethodInsn(INVOKEVIRTUAL, "Parser", "mark", "(Ljava/lang/String;)V");
Label l0 = new Label();
mv.visitLabel(l0);
mv.visitLineNumber(62, l0);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "Parser", "pos", "I");
mv.visitVarInsn(ISTORE, 1);
Label l1 = new Label();
mv.visitLabel(l1);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKEVIRTUAL, "Parser", "Char", "()Z");
Label l2 = new Label();
mv.visitJumpInsn(IFEQ, l2);
mv.visitVarInsn(ALOAD, 0);
mv.visitLdcInsn("-");
mv.visitMethodInsn(INVOKEVIRTUAL, "Parser", "match", "(Ljava/lang/String;)Z");
mv.visitJumpInsn(IFEQ, l2);
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKEVIRTUAL, "Parser", "Char", "()Z");
Label l3 = new Label();
mv.visitJumpInsn(IFNE, l3);
mv.visitLabel(l2);
mv.visitFrame(Opcodes.F_NEW, 2, new Object[] {"Parser", Opcodes.INTEGER}, 1, new Object[] {"Parser"});
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKEVIRTUAL, "Parser", "Char", "()Z");
Label l4 = new Label();
mv.visitJumpInsn(IFEQ, l4);
mv.visitLabel(l3);
mv.visitFrame(Opcodes.F_NEW, 2, new Object[] {"Parser", Opcodes.INTEGER}, 1, new Object[] {"Parser"});
mv.visitInsn(ICONST_1);
Label l5 = new Label();
mv.visitJumpInsn(GOTO, l5);
mv.visitLabel(l4);
mv.visitFrame(Opcodes.F_NEW, 2, new Object[] {"Parser", Opcodes.INTEGER}, 1, new Object[] {"Parser"});
mv.visitInsn(ICONST_0);
mv.visitLabel(l5);
mv.visitFrame(Opcodes.F_NEW, 2, new Object[] {"Parser", Opcodes.INTEGER}, 2, new Object[] {"Parser", Opcodes.INTEGER});
mv.visitVarInsn(ILOAD, 1);
mv.visitMethodInsn(INVOKEVIRTUAL, "Parser", "be", "(ZI)Z");
mv.visitInsn(IRETURN);
Label l6 = new Label();
mv.visitLabel(l6);
mv.visitLocalVariable("this", "LParser;", null, l0, l6, 0);
mv.visitLocalVariable("at", "I", null, l1, l6, 1);
mv.visitMaxs(3, 2);
mv.visitEnd();
}
{
mv = cw.visitMethod(0, "Char", "()Z", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitLdcInsn("Char");
mv.visitMethodInsn(INVOKEVIRTUAL, "Parser", "mark", "(Ljava/lang/String;)V");
Label l0 = new Label();
mv.visitLabel(l0);
mv.visitLineNumber(65, l0);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "Parser", "pos", "I");
mv.visitVarInsn(ISTORE, 1);
Label l1 = new Label();
mv.visitLabel(l1);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ALOAD, 0);
mv.visitLdcInsn("\\");
mv.visitMethodInsn(INVOKEVIRTUAL, "Parser", "match", "(Ljava/lang/String;)Z");
Label l2 = new Label();
mv.visitJumpInsn(IFEQ, l2);
mv.visitVarInsn(ALOAD, 0);
mv.visitLdcInsn("nrt'\"[]\\");
mv.visitMethodInsn(INVOKEVIRTUAL, "Parser", "chars", "(Ljava/lang/String;)Z");
Label l3 = new Label();
mv.visitJumpInsn(IFNE, l3);
mv.visitLabel(l2);
mv.visitFrame(Opcodes.F_NEW, 2, new Object[] {"Parser", Opcodes.INTEGER}, 1, new Object[] {"Parser"});
mv.visitVarInsn(ALOAD, 0);
mv.visitLdcInsn("\\");
mv.visitMethodInsn(INVOKEVIRTUAL, "Parser", "match", "(Ljava/lang/String;)Z");
Label l4 = new Label();
mv.visitJumpInsn(IFEQ, l4);
mv.visitVarInsn(ALOAD, 0);
mv.visitIntInsn(BIPUSH, 48);
mv.visitIntInsn(BIPUSH, 50);
mv.visitMethodInsn(INVOKEVIRTUAL, "Parser", "range", "(CC)Z");
mv.visitJumpInsn(IFEQ, l4);
mv.visitVarInsn(ALOAD, 0);
mv.visitIntInsn(BIPUSH, 48);
mv.visitIntInsn(BIPUSH, 55);
mv.visitMethodInsn(INVOKEVIRTUAL, "Parser", "range", "(CC)Z");
mv.visitJumpInsn(IFEQ, l4);
mv.visitVarInsn(ALOAD, 0);
mv.visitIntInsn(BIPUSH, 48);
mv.visitIntInsn(BIPUSH, 55);
mv.visitMethodInsn(INVOKEVIRTUAL, "Parser", "range", "(CC)Z");
mv.visitJumpInsn(IFNE, l3);
mv.visitLabel(l4);
mv.visitFrame(Opcodes.F_NEW, 2, new Object[] {"Parser", Opcodes.INTEGER}, 1, new Object[] {"Parser"});
mv.visitVarInsn(ALOAD, 0);
mv.visitLdcInsn("\\");
mv.visitMethodInsn(INVOKEVIRTUAL, "Parser", "match", "(Ljava/lang/String;)Z");
Label l5 = new Label();
mv.visitJumpInsn(IFEQ, l5);
mv.visitVarInsn(ALOAD, 0);
mv.visitIntInsn(BIPUSH, 48);
mv.visitIntInsn(BIPUSH, 55);
mv.visitMethodInsn(INVOKEVIRTUAL, "Parser", "range", "(CC)Z");
mv.visitJumpInsn(IFEQ, l5);
mv.visitVarInsn(ALOAD, 0);
mv.visitIntInsn(BIPUSH, 48);
mv.visitIntInsn(BIPUSH, 55);
mv.visitMethodInsn(INVOKEVIRTUAL, "Parser", "range", "(CC)Z");
mv.visitJumpInsn(IFNE, l3);
mv.visitLabel(l5);
mv.visitFrame(Opcodes.F_NEW, 2, new Object[] {"Parser", Opcodes.INTEGER}, 1, new Object[] {"Parser"});
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKEVIRTUAL, "Parser", "Char_Not", "()Z");
Label l6 = new Label();
mv.visitJumpInsn(IFEQ, l6);
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKEVIRTUAL, "Parser", "dot", "()Z");
mv.visitJumpInsn(IFEQ, l6);
mv.visitLabel(l3);
mv.visitFrame(Opcodes.F_NEW, 2, new Object[] {"Parser", Opcodes.INTEGER}, 1, new Object[] {"Parser"});
mv.visitInsn(ICONST_1);
Label l7 = new Label();
mv.visitJumpInsn(GOTO, l7);
mv.visitLabel(l6);
mv.visitFrame(Opcodes.F_NEW, 2, new Object[] {"Parser", Opcodes.INTEGER}, 1, new Object[] {"Parser"});
mv.visitInsn(ICONST_0);
mv.visitLabel(l7);
mv.visitFrame(Opcodes.F_NEW, 2, new Object[] {"Parser", Opcodes.INTEGER}, 2, new Object[] {"Parser", Opcodes.INTEGER});
mv.visitVarInsn(ILOAD, 1);
mv.visitMethodInsn(INVOKEVIRTUAL, "Parser", "be", "(ZI)Z");
mv.visitInsn(IRETURN);
Label l8 = new Label();
mv.visitLabel(l8);
mv.visitLocalVariable("this", "LParser;", null, l0, l8, 0);
mv.visitLocalVariable("at", "I", null, l1, l8, 1);
mv.visitMaxs(4, 2);
mv.visitEnd();
}
{
mv = cw.visitMethod(0, "Char_Not", "()Z", null, null);
mv.visitCode();
Label l0 = new Label();
mv.visitLabel(l0);
mv.visitLineNumber(66, l0);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "Parser", "pos", "I");
mv.visitVarInsn(ISTORE, 1);
Label l1 = new Label();
mv.visitLabel(l1);
mv.visitVarInsn(ALOAD, 0);
mv.visitLdcInsn("\\");
mv.visitMethodInsn(INVOKEVIRTUAL, "Parser", "match", "(Ljava/lang/String;)Z");
Label l2 = new Label();
mv.visitJumpInsn(IFNE, l2);
mv.visitInsn(ICONST_1);
Label l3 = new Label();
mv.visitJumpInsn(GOTO, l3);
mv.visitLabel(l2);
mv.visitFrame(Opcodes.F_NEW, 2, new Object[] {"Parser", Opcodes.INTEGER}, 0, new Object[] {});
mv.visitInsn(ICONST_0);
mv.visitLabel(l3);
mv.visitFrame(Opcodes.F_NEW, 2, new Object[] {"Parser", Opcodes.INTEGER}, 1, new Object[] {Opcodes.INTEGER});
mv.visitVarInsn(ISTORE, 2);
Label l4 = new Label();
mv.visitLabel(l4);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ILOAD, 1);
mv.visitFieldInsn(PUTFIELD, "Parser", "pos", "I");
mv.visitVarInsn(ILOAD, 2);
mv.visitInsn(IRETURN);
Label l5 = new Label();
mv.visitLabel(l5);
mv.visitLocalVariable("this", "LParser;", null, l0, l5, 0);
mv.visitLocalVariable("at", "I", null, l1, l5, 1);
mv.visitLocalVariable("b", "Z", null, l4, l5, 2);
mv.visitMaxs(2, 3);
mv.visitEnd();
}
{
mv = cw.visitMethod(0, "LEFTARROW", "()Z", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitLdcInsn("LEFTARROW");
mv.visitMethodInsn(INVOKEVIRTUAL, "Parser", "mark", "(Ljava/lang/String;)V");
Label l0 = new Label();
mv.visitLabel(l0);
mv.visitLineNumber(69, l0);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "Parser", "pos", "I");
mv.visitVarInsn(ISTORE, 1);
Label l1 = new Label();
mv.visitLabel(l1);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ALOAD, 0);
mv.visitLdcInsn("<-");
mv.visitMethodInsn(INVOKEVIRTUAL, "Parser", "match", "(Ljava/lang/String;)Z");
Label l2 = new Label();
mv.visitJumpInsn(IFEQ, l2);
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKESPECIAL, "Parser", "Spacing", "()Z");
mv.visitJumpInsn(IFEQ, l2);
mv.visitInsn(ICONST_1);
Label l3 = new Label();
mv.visitJumpInsn(GOTO, l3);
mv.visitLabel(l2);
mv.visitFrame(Opcodes.F_NEW, 2, new Object[] {"Parser", Opcodes.INTEGER}, 1, new Object[] {"Parser"});
mv.visitInsn(ICONST_0);
mv.visitLabel(l3);
mv.visitFrame(Opcodes.F_NEW, 2, new Object[] {"Parser", Opcodes.INTEGER}, 2, new Object[] {"Parser", Opcodes.INTEGER});
mv.visitVarInsn(ILOAD, 1);
mv.visitMethodInsn(INVOKEVIRTUAL, "Parser", "be", "(ZI)Z");
mv.visitInsn(IRETURN);
Label l4 = new Label();
mv.visitLabel(l4);
mv.visitLocalVariable("this", "LParser;", null, l0, l4, 0);
mv.visitLocalVariable("at", "I", null, l1, l4, 1);
mv.visitMaxs(3, 2);
mv.visitEnd();
}
{
mv = cw.visitMethod(0, "SLASH", "()Z", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitLdcInsn("SLASH");
mv.visitMethodInsn(INVOKEVIRTUAL, "Parser", "mark", "(Ljava/lang/String;)V");
Label l0 = new Label();
mv.visitLabel(l0);
mv.visitLineNumber(72, l0);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "Parser", "pos", "I");
mv.visitVarInsn(ISTORE, 1);
Label l1 = new Label();
mv.visitLabel(l1);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ALOAD, 0);
mv.visitLdcInsn("/");
mv.visitMethodInsn(INVOKEVIRTUAL, "Parser", "match", "(Ljava/lang/String;)Z");
Label l2 = new Label();
mv.visitJumpInsn(IFEQ, l2);
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKESPECIAL, "Parser", "Spacing", "()Z");
mv.visitJumpInsn(IFEQ, l2);
mv.visitInsn(ICONST_1);
Label l3 = new Label();
mv.visitJumpInsn(GOTO, l3);
mv.visitLabel(l2);
mv.visitFrame(Opcodes.F_NEW, 2, new Object[] {"Parser", Opcodes.INTEGER}, 1, new Object[] {"Parser"});
mv.visitInsn(ICONST_0);
mv.visitLabel(l3);
mv.visitFrame(Opcodes.F_NEW, 2, new Object[] {"Parser", Opcodes.INTEGER}, 2, new Object[] {"Parser", Opcodes.INTEGER});
mv.visitVarInsn(ILOAD, 1);
mv.visitMethodInsn(INVOKEVIRTUAL, "Parser", "be", "(ZI)Z");
mv.visitInsn(IRETURN);
Label l4 = new Label();
mv.visitLabel(l4);
mv.visitLocalVariable("this", "LParser;", null, l0, l4, 0);
mv.visitLocalVariable("at", "I", null, l1, l4, 1);
mv.visitMaxs(3, 2);
mv.visitEnd();
}
{
mv = cw.visitMethod(0, "AND", "()Z", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitLdcInsn("AND");
mv.visitMethodInsn(INVOKEVIRTUAL, "Parser", "mark", "(Ljava/lang/String;)V");
Label l0 = new Label();
mv.visitLabel(l0);
mv.visitLineNumber(75, l0);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "Parser", "pos", "I");
mv.visitVarInsn(ISTORE, 1);
Label l1 = new Label();
mv.visitLabel(l1);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ALOAD, 0);
mv.visitLdcInsn("&");
mv.visitMethodInsn(INVOKEVIRTUAL, "Parser", "match", "(Ljava/lang/String;)Z");
Label l2 = new Label();
mv.visitJumpInsn(IFEQ, l2);
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKESPECIAL, "Parser", "Spacing", "()Z");
mv.visitJumpInsn(IFEQ, l2);
mv.visitInsn(ICONST_1);
Label l3 = new Label();
mv.visitJumpInsn(GOTO, l3);
mv.visitLabel(l2);
mv.visitFrame(Opcodes.F_NEW, 2, new Object[] {"Parser", Opcodes.INTEGER}, 1, new Object[] {"Parser"});
mv.visitInsn(ICONST_0);
mv.visitLabel(l3);
mv.visitFrame(Opcodes.F_NEW, 2, new Object[] {"Parser", Opcodes.INTEGER}, 2, new Object[] {"Parser", Opcodes.INTEGER});
mv.visitVarInsn(ILOAD, 1);
mv.visitMethodInsn(INVOKEVIRTUAL, "Parser", "be", "(ZI)Z");
mv.visitInsn(IRETURN);
Label l4 = new Label();
mv.visitLabel(l4);
mv.visitLocalVariable("this", "LParser;", null, l0, l4, 0);
mv.visitLocalVariable("at", "I", null, l1, l4, 1);
mv.visitMaxs(3, 2);
mv.visitEnd();
}
{
mv = cw.visitMethod(0, "NOT", "()Z", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitLdcInsn("NOT");
mv.visitMethodInsn(INVOKEVIRTUAL, "Parser", "mark", "(Ljava/lang/String;)V");
Label l0 = new Label();
mv.visitLabel(l0);
mv.visitLineNumber(78, l0);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "Parser", "pos", "I");
mv.visitVarInsn(ISTORE, 1);
Label l1 = new Label();
mv.visitLabel(l1);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ALOAD, 0);
mv.visitLdcInsn("!");
mv.visitMethodInsn(INVOKEVIRTUAL, "Parser", "match", "(Ljava/lang/String;)Z");
Label l2 = new Label();
mv.visitJumpInsn(IFEQ, l2);
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKESPECIAL, "Parser", "Spacing", "()Z");
mv.visitJumpInsn(IFEQ, l2);
mv.visitInsn(ICONST_1);
Label l3 = new Label();
mv.visitJumpInsn(GOTO, l3);
mv.visitLabel(l2);
mv.visitFrame(Opcodes.F_NEW, 2, new Object[] {"Parser", Opcodes.INTEGER}, 1, new Object[] {"Parser"});
mv.visitInsn(ICONST_0);
mv.visitLabel(l3);
mv.visitFrame(Opcodes.F_NEW, 2, new Object[] {"Parser", Opcodes.INTEGER}, 2, new Object[] {"Parser", Opcodes.INTEGER});
mv.visitVarInsn(ILOAD, 1);
mv.visitMethodInsn(INVOKEVIRTUAL, "Parser", "be", "(ZI)Z");
mv.visitInsn(IRETURN);
Label l4 = new Label();
mv.visitLabel(l4);
mv.visitLocalVariable("this", "LParser;", null, l0, l4, 0);
mv.visitLocalVariable("at", "I", null, l1, l4, 1);
mv.visitMaxs(3, 2);
mv.visitEnd();
}
{
mv = cw.visitMethod(0, "QUESTION", "()Z", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitLdcInsn("QUESTION");
mv.visitMethodInsn(INVOKEVIRTUAL, "Parser", "mark", "(Ljava/lang/String;)V");
Label l0 = new Label();
mv.visitLabel(l0);
mv.visitLineNumber(81, l0);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "Parser", "pos", "I");
mv.visitVarInsn(ISTORE, 1);
Label l1 = new Label();
mv.visitLabel(l1);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ALOAD, 0);
mv.visitLdcInsn("?");
mv.visitMethodInsn(INVOKEVIRTUAL, "Parser", "match", "(Ljava/lang/String;)Z");
Label l2 = new Label();
mv.visitJumpInsn(IFEQ, l2);
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKESPECIAL, "Parser", "Spacing", "()Z");
mv.visitJumpInsn(IFEQ, l2);
mv.visitInsn(ICONST_1);
Label l3 = new Label();
mv.visitJumpInsn(GOTO, l3);
mv.visitLabel(l2);
mv.visitFrame(Opcodes.F_NEW, 2, new Object[] {"Parser", Opcodes.INTEGER}, 1, new Object[] {"Parser"});
mv.visitInsn(ICONST_0);
mv.visitLabel(l3);
mv.visitFrame(Opcodes.F_NEW, 2, new Object[] {"Parser", Opcodes.INTEGER}, 2, new Object[] {"Parser", Opcodes.INTEGER});
mv.visitVarInsn(ILOAD, 1);
mv.visitMethodInsn(INVOKEVIRTUAL, "Parser", "be", "(ZI)Z");
mv.visitInsn(IRETURN);
Label l4 = new Label();
mv.visitLabel(l4);
mv.visitLocalVariable("this", "LParser;", null, l0, l4, 0);
mv.visitLocalVariable("at", "I", null, l1, l4, 1);
mv.visitMaxs(3, 2);
mv.visitEnd();
}
{
mv = cw.visitMethod(0, "STAR", "()Z", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitLdcInsn("STAR");
mv.visitMethodInsn(INVOKEVIRTUAL, "Parser", "mark", "(Ljava/lang/String;)V");
Label l0 = new Label();
mv.visitLabel(l0);
mv.visitLineNumber(84, l0);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "Parser", "pos", "I");
mv.visitVarInsn(ISTORE, 1);
Label l1 = new Label();
mv.visitLabel(l1);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ALOAD, 0);
mv.visitLdcInsn("*");
mv.visitMethodInsn(INVOKEVIRTUAL, "Parser", "match", "(Ljava/lang/String;)Z");
Label l2 = new Label();
mv.visitJumpInsn(IFEQ, l2);
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKESPECIAL, "Parser", "Spacing", "()Z");
mv.visitJumpInsn(IFEQ, l2);
mv.visitInsn(ICONST_1);
Label l3 = new Label();
mv.visitJumpInsn(GOTO, l3);
mv.visitLabel(l2);
mv.visitFrame(Opcodes.F_NEW, 2, new Object[] {"Parser", Opcodes.INTEGER}, 1, new Object[] {"Parser"});
mv.visitInsn(ICONST_0);
mv.visitLabel(l3);
mv.visitFrame(Opcodes.F_NEW, 2, new Object[] {"Parser", Opcodes.INTEGER}, 2, new Object[] {"Parser", Opcodes.INTEGER});
mv.visitVarInsn(ILOAD, 1);
mv.visitMethodInsn(INVOKEVIRTUAL, "Parser", "be", "(ZI)Z");
mv.visitInsn(IRETURN);
Label l4 = new Label();
mv.visitLabel(l4);
mv.visitLocalVariable("this", "LParser;", null, l0, l4, 0);
mv.visitLocalVariable("at", "I", null, l1, l4, 1);
mv.visitMaxs(3, 2);
mv.visitEnd();
}
{
mv = cw.visitMethod(0, "PLUS", "()Z", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitLdcInsn("PLUS");
mv.visitMethodInsn(INVOKEVIRTUAL, "Parser", "mark", "(Ljava/lang/String;)V");
Label l0 = new Label();
mv.visitLabel(l0);
mv.visitLineNumber(87, l0);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "Parser", "pos", "I");
mv.visitVarInsn(ISTORE, 1);
Label l1 = new Label();
mv.visitLabel(l1);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ALOAD, 0);
mv.visitLdcInsn("+");
mv.visitMethodInsn(INVOKEVIRTUAL, "Parser", "match", "(Ljava/lang/String;)Z");
Label l2 = new Label();
mv.visitJumpInsn(IFEQ, l2);
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKESPECIAL, "Parser", "Spacing", "()Z");
mv.visitJumpInsn(IFEQ, l2);
mv.visitInsn(ICONST_1);
Label l3 = new Label();
mv.visitJumpInsn(GOTO, l3);
mv.visitLabel(l2);
mv.visitFrame(Opcodes.F_NEW, 2, new Object[] {"Parser", Opcodes.INTEGER}, 1, new Object[] {"Parser"});
mv.visitInsn(ICONST_0);
mv.visitLabel(l3);
mv.visitFrame(Opcodes.F_NEW, 2, new Object[] {"Parser", Opcodes.INTEGER}, 2, new Object[] {"Parser", Opcodes.INTEGER});
mv.visitVarInsn(ILOAD, 1);
mv.visitMethodInsn(INVOKEVIRTUAL, "Parser", "be", "(ZI)Z");
mv.visitInsn(IRETURN);
Label l4 = new Label();
mv.visitLabel(l4);
mv.visitLocalVariable("this", "LParser;", null, l0, l4, 0);
mv.visitLocalVariable("at", "I", null, l1, l4, 1);
mv.visitMaxs(3, 2);
mv.visitEnd();
}
{
mv = cw.visitMethod(0, "OPEN", "()Z", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitLdcInsn("OPEN");
mv.visitMethodInsn(INVOKEVIRTUAL, "Parser", "mark", "(Ljava/lang/String;)V");
Label l0 = new Label();
mv.visitLabel(l0);
mv.visitLineNumber(90, l0);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "Parser", "pos", "I");
mv.visitVarInsn(ISTORE, 1);
Label l1 = new Label();
mv.visitLabel(l1);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ALOAD, 0);
mv.visitLdcInsn("(");
mv.visitMethodInsn(INVOKEVIRTUAL, "Parser", "match", "(Ljava/lang/String;)Z");
Label l2 = new Label();
mv.visitJumpInsn(IFEQ, l2);
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKESPECIAL, "Parser", "Spacing", "()Z");
mv.visitJumpInsn(IFEQ, l2);
mv.visitInsn(ICONST_1);
Label l3 = new Label();
mv.visitJumpInsn(GOTO, l3);
mv.visitLabel(l2);
mv.visitFrame(Opcodes.F_NEW, 2, new Object[] {"Parser", Opcodes.INTEGER}, 1, new Object[] {"Parser"});
mv.visitInsn(ICONST_0);
mv.visitLabel(l3);
mv.visitFrame(Opcodes.F_NEW, 2, new Object[] {"Parser", Opcodes.INTEGER}, 2, new Object[] {"Parser", Opcodes.INTEGER});
mv.visitVarInsn(ILOAD, 1);
mv.visitMethodInsn(INVOKEVIRTUAL, "Parser", "be", "(ZI)Z");
mv.visitInsn(IRETURN);
Label l4 = new Label();
mv.visitLabel(l4);
mv.visitLocalVariable("this", "LParser;", null, l0, l4, 0);
mv.visitLocalVariable("at", "I", null, l1, l4, 1);
mv.visitMaxs(3, 2);
mv.visitEnd();
}
{
mv = cw.visitMethod(0, "CLOSE", "()Z", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitLdcInsn("CLOSE");
mv.visitMethodInsn(INVOKEVIRTUAL, "Parser", "mark", "(Ljava/lang/String;)V");
Label l0 = new Label();
mv.visitLabel(l0);
mv.visitLineNumber(93, l0);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "Parser", "pos", "I");
mv.visitVarInsn(ISTORE, 1);
Label l1 = new Label();
mv.visitLabel(l1);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ALOAD, 0);
mv.visitLdcInsn(")");
mv.visitMethodInsn(INVOKEVIRTUAL, "Parser", "match", "(Ljava/lang/String;)Z");
Label l2 = new Label();
mv.visitJumpInsn(IFEQ, l2);
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKESPECIAL, "Parser", "Spacing", "()Z");
mv.visitJumpInsn(IFEQ, l2);
mv.visitInsn(ICONST_1);
Label l3 = new Label();
mv.visitJumpInsn(GOTO, l3);
mv.visitLabel(l2);
mv.visitFrame(Opcodes.F_NEW, 2, new Object[] {"Parser", Opcodes.INTEGER}, 1, new Object[] {"Parser"});
mv.visitInsn(ICONST_0);
mv.visitLabel(l3);
mv.visitFrame(Opcodes.F_NEW, 2, new Object[] {"Parser", Opcodes.INTEGER}, 2, new Object[] {"Parser", Opcodes.INTEGER});
mv.visitVarInsn(ILOAD, 1);
mv.visitMethodInsn(INVOKEVIRTUAL, "Parser", "be", "(ZI)Z");
mv.visitInsn(IRETURN);
Label l4 = new Label();
mv.visitLabel(l4);
mv.visitLocalVariable("this", "LParser;", null, l0, l4, 0);
mv.visitLocalVariable("at", "I", null, l1, l4, 1);
mv.visitMaxs(3, 2);
mv.visitEnd();
}
{
mv = cw.visitMethod(0, "DOT", "()Z", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitLdcInsn("DOT");
mv.visitMethodInsn(INVOKEVIRTUAL, "Parser", "mark", "(Ljava/lang/String;)V");
Label l0 = new Label();
mv.visitLabel(l0);
mv.visitLineNumber(96, l0);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "Parser", "pos", "I");
mv.visitVarInsn(ISTORE, 1);
Label l1 = new Label();
mv.visitLabel(l1);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ALOAD, 0);
mv.visitLdcInsn(".");
mv.visitMethodInsn(INVOKEVIRTUAL, "Parser", "match", "(Ljava/lang/String;)Z");
Label l2 = new Label();
mv.visitJumpInsn(IFEQ, l2);
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKESPECIAL, "Parser", "Spacing", "()Z");
mv.visitJumpInsn(IFEQ, l2);
mv.visitInsn(ICONST_1);
Label l3 = new Label();
mv.visitJumpInsn(GOTO, l3);
mv.visitLabel(l2);
mv.visitFrame(Opcodes.F_NEW, 2, new Object[] {"Parser", Opcodes.INTEGER}, 1, new Object[] {"Parser"});
mv.visitInsn(ICONST_0);
mv.visitLabel(l3);
mv.visitFrame(Opcodes.F_NEW, 2, new Object[] {"Parser", Opcodes.INTEGER}, 2, new Object[] {"Parser", Opcodes.INTEGER});
mv.visitVarInsn(ILOAD, 1);
mv.visitMethodInsn(INVOKEVIRTUAL, "Parser", "be", "(ZI)Z");
mv.visitInsn(IRETURN);
Label l4 = new Label();
mv.visitLabel(l4);
mv.visitLocalVariable("this", "LParser;", null, l0, l4, 0);
mv.visitLocalVariable("at", "I", null, l1, l4, 1);
mv.visitMaxs(3, 2);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PRIVATE, "Spacing", "()Z", null, null);
mv.visitCode();
Label l0 = new Label();
mv.visitLabel(l0);
mv.visitLineNumber(99, l0);
mv.visitFrame(Opcodes.F_NEW, 1, new Object[] {"Parser"}, 0, new Object[] {});
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKESPECIAL, "Parser", "Space", "()Z");
mv.visitJumpInsn(IFNE, l0);
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKEVIRTUAL, "Parser", "Comment", "()Z");
Label l1 = new Label();
mv.visitJumpInsn(IFEQ, l1);
mv.visitJumpInsn(GOTO, l0);
mv.visitLabel(l1);
mv.visitFrame(Opcodes.F_NEW, 1, new Object[] {"Parser"}, 0, new Object[] {});
mv.visitInsn(ICONST_1);
mv.visitInsn(IRETURN);
Label l2 = new Label();
mv.visitLabel(l2);
mv.visitLocalVariable("this", "LParser;", null, l0, l2, 0);
mv.visitMaxs(1, 1);
mv.visitEnd();
}
{
mv = cw.visitMethod(0, "Comment", "()Z", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitLdcInsn("Comment");
mv.visitMethodInsn(INVOKEVIRTUAL, "Parser", "mark", "(Ljava/lang/String;)V");
Label l0 = new Label();
mv.visitLabel(l0);
mv.visitLineNumber(102, l0);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "Parser", "pos", "I");
mv.visitVarInsn(ISTORE, 1);
Label l1 = new Label();
mv.visitLabel(l1);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ALOAD, 0);
mv.visitLdcInsn("#");
mv.visitMethodInsn(INVOKEVIRTUAL, "Parser", "match", "(Ljava/lang/String;)Z");
Label l2 = new Label();
mv.visitJumpInsn(IFEQ, l2);
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKEVIRTUAL, "Parser", "Comment_Any", "()Z");
mv.visitJumpInsn(IFEQ, l2);
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKESPECIAL, "Parser", "EndOfLine", "()Z");
mv.visitJumpInsn(IFEQ, l2);
mv.visitInsn(ICONST_1);
Label l3 = new Label();
mv.visitJumpInsn(GOTO, l3);
mv.visitLabel(l2);
mv.visitFrame(Opcodes.F_NEW, 2, new Object[] {"Parser", Opcodes.INTEGER}, 1, new Object[] {"Parser"});
mv.visitInsn(ICONST_0);
mv.visitLabel(l3);
mv.visitFrame(Opcodes.F_NEW, 2, new Object[] {"Parser", Opcodes.INTEGER}, 2, new Object[] {"Parser", Opcodes.INTEGER});
mv.visitVarInsn(ILOAD, 1);
mv.visitMethodInsn(INVOKEVIRTUAL, "Parser", "be", "(ZI)Z");
mv.visitInsn(IRETURN);
Label l4 = new Label();
mv.visitLabel(l4);
mv.visitLocalVariable("this", "LParser;", null, l0, l4, 0);
mv.visitLocalVariable("at", "I", null, l1, l4, 1);
mv.visitMaxs(3, 2);
mv.visitEnd();
}
{
mv = cw.visitMethod(0, "Comment_Any", "()Z", null, null);
mv.visitCode();
Label l0 = new Label();
mv.visitLabel(l0);
mv.visitLineNumber(103, l0);
mv.visitFrame(Opcodes.F_NEW, 1, new Object[] {"Parser"}, 0, new Object[] {});
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKEVIRTUAL, "Parser", "Comment_Not", "()Z");
Label l1 = new Label();
mv.visitJumpInsn(IFEQ, l1);
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKEVIRTUAL, "Parser", "dot", "()Z");
mv.visitJumpInsn(IFEQ, l1);
mv.visitJumpInsn(GOTO, l0);
mv.visitLabel(l1);
mv.visitFrame(Opcodes.F_NEW, 1, new Object[] {"Parser"}, 0, new Object[] {});
mv.visitInsn(ICONST_1);
mv.visitInsn(IRETURN);
Label l2 = new Label();
mv.visitLabel(l2);
mv.visitLocalVariable("this", "LParser;", null, l0, l2, 0);
mv.visitMaxs(1, 1);
mv.visitEnd();
}
{
mv = cw.visitMethod(0, "Comment_Not", "()Z", null, null);
mv.visitCode();
Label l0 = new Label();
mv.visitLabel(l0);
mv.visitLineNumber(104, l0);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "Parser", "pos", "I");
mv.visitVarInsn(ISTORE, 1);
Label l1 = new Label();
mv.visitLabel(l1);
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKESPECIAL, "Parser", "EndOfLine", "()Z");
Label l2 = new Label();
mv.visitJumpInsn(IFNE, l2);
mv.visitInsn(ICONST_1);
Label l3 = new Label();
mv.visitJumpInsn(GOTO, l3);
mv.visitLabel(l2);
mv.visitFrame(Opcodes.F_NEW, 2, new Object[] {"Parser", Opcodes.INTEGER}, 0, new Object[] {});
mv.visitInsn(ICONST_0);
mv.visitLabel(l3);
mv.visitFrame(Opcodes.F_NEW, 2, new Object[] {"Parser", Opcodes.INTEGER}, 1, new Object[] {Opcodes.INTEGER});
mv.visitVarInsn(ISTORE, 2);
Label l4 = new Label();
mv.visitLabel(l4);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ILOAD, 1);
mv.visitFieldInsn(PUTFIELD, "Parser", "pos", "I");
mv.visitVarInsn(ILOAD, 2);
mv.visitInsn(IRETURN);
Label l5 = new Label();
mv.visitLabel(l5);
mv.visitLocalVariable("this", "LParser;", null, l0, l5, 0);
mv.visitLocalVariable("at", "I", null, l1, l5, 1);
mv.visitLocalVariable("b", "Z", null, l4, l5, 2);
mv.visitMaxs(2, 3);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PRIVATE, "Space", "()Z", null, null);
mv.visitCode();
Label l0 = new Label();
mv.visitLabel(l0);
mv.visitLineNumber(107, l0);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "Parser", "pos", "I");
mv.visitVarInsn(ISTORE, 1);
Label l1 = new Label();
mv.visitLabel(l1);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ALOAD, 0);
mv.visitLdcInsn(" ");
mv.visitMethodInsn(INVOKEVIRTUAL, "Parser", "match", "(Ljava/lang/String;)Z");
Label l2 = new Label();
mv.visitJumpInsn(IFNE, l2);
mv.visitVarInsn(ALOAD, 0);
mv.visitLdcInsn("\u0009");
mv.visitMethodInsn(INVOKEVIRTUAL, "Parser", "match", "(Ljava/lang/String;)Z");
mv.visitJumpInsn(IFNE, l2);
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKESPECIAL, "Parser", "EndOfLine", "()Z");
Label l3 = new Label();
mv.visitJumpInsn(IFEQ, l3);
mv.visitLabel(l2);
mv.visitFrame(Opcodes.F_NEW, 2, new Object[] {"Parser", Opcodes.INTEGER}, 1, new Object[] {"Parser"});
mv.visitInsn(ICONST_1);
Label l4 = new Label();
mv.visitJumpInsn(GOTO, l4);
mv.visitLabel(l3);
mv.visitFrame(Opcodes.F_NEW, 2, new Object[] {"Parser", Opcodes.INTEGER}, 1, new Object[] {"Parser"});
mv.visitInsn(ICONST_0);
mv.visitLabel(l4);
mv.visitFrame(Opcodes.F_NEW, 2, new Object[] {"Parser", Opcodes.INTEGER}, 2, new Object[] {"Parser", Opcodes.INTEGER});
mv.visitVarInsn(ILOAD, 1);
mv.visitMethodInsn(INVOKEVIRTUAL, "Parser", "be", "(ZI)Z");
mv.visitInsn(IRETURN);
Label l5 = new Label();
mv.visitLabel(l5);
mv.visitLocalVariable("this", "LParser;", null, l0, l5, 0);
mv.visitLocalVariable("at", "I", null, l1, l5, 1);
mv.visitMaxs(3, 2);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PRIVATE, "EndOfLine", "()Z", null, null);
mv.visitCode();
Label l0 = new Label();
mv.visitLabel(l0);
mv.visitLineNumber(110, l0);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "Parser", "pos", "I");
mv.visitVarInsn(ISTORE, 1);
Label l1 = new Label();
mv.visitLabel(l1);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ALOAD, 0);
mv.visitLdcInsn("\r\n");
mv.visitMethodInsn(INVOKEVIRTUAL, "Parser", "match", "(Ljava/lang/String;)Z");
Label l2 = new Label();
mv.visitJumpInsn(IFNE, l2);
mv.visitVarInsn(ALOAD, 0);
mv.visitLdcInsn("\n");
mv.visitMethodInsn(INVOKEVIRTUAL, "Parser", "match", "(Ljava/lang/String;)Z");
mv.visitJumpInsn(IFNE, l2);
mv.visitVarInsn(ALOAD, 0);
mv.visitLdcInsn("\r");
mv.visitMethodInsn(INVOKEVIRTUAL, "Parser", "match", "(Ljava/lang/String;)Z");
Label l3 = new Label();
mv.visitJumpInsn(IFEQ, l3);
mv.visitLabel(l2);
mv.visitFrame(Opcodes.F_NEW, 2, new Object[] {"Parser", Opcodes.INTEGER}, 1, new Object[] {"Parser"});
mv.visitInsn(ICONST_1);
Label l4 = new Label();
mv.visitJumpInsn(GOTO, l4);
mv.visitLabel(l3);
mv.visitFrame(Opcodes.F_NEW, 2, new Object[] {"Parser", Opcodes.INTEGER}, 1, new Object[] {"Parser"});
mv.visitInsn(ICONST_0);
mv.visitLabel(l4);
mv.visitFrame(Opcodes.F_NEW, 2, new Object[] {"Parser", Opcodes.INTEGER}, 2, new Object[] {"Parser", Opcodes.INTEGER});
mv.visitVarInsn(ILOAD, 1);
mv.visitMethodInsn(INVOKEVIRTUAL, "Parser", "be", "(ZI)Z");
mv.visitInsn(IRETURN);
Label l5 = new Label();
mv.visitLabel(l5);
mv.visitLocalVariable("this", "LParser;", null, l0, l5, 0);
mv.visitLocalVariable("at", "I", null, l1, l5, 1);
mv.visitMaxs(3, 2);
mv.visitEnd();
}
{
mv = cw.visitMethod(0, "EndOfFile", "()Z", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitLdcInsn("EndOfFile");
mv.visitMethodInsn(INVOKEVIRTUAL, "Parser", "mark", "(Ljava/lang/String;)V");
Label l0 = new Label();
mv.visitLabel(l0);
mv.visitLineNumber(113, l0);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "Parser", "pos", "I");
mv.visitVarInsn(ISTORE, 1);
Label l1 = new Label();
mv.visitLabel(l1);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKEVIRTUAL, "Parser", "EndOfFile_Not", "()Z");
mv.visitVarInsn(ILOAD, 1);
mv.visitMethodInsn(INVOKEVIRTUAL, "Parser", "be", "(ZI)Z");
mv.visitInsn(IRETURN);
Label l2 = new Label();
mv.visitLabel(l2);
mv.visitLocalVariable("this", "LParser;", null, l0, l2, 0);
mv.visitLocalVariable("at", "I", null, l1, l2, 1);
mv.visitMaxs(3, 2);
mv.visitEnd();
}
{
mv = cw.visitMethod(0, "EndOfFile_Not", "()Z", null, null);
mv.visitCode();
Label l0 = new Label();
mv.visitLabel(l0);
mv.visitLineNumber(114, l0);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "Parser", "pos", "I");
mv.visitVarInsn(ISTORE, 1);
Label l1 = new Label();
mv.visitLabel(l1);
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKEVIRTUAL, "Parser", "dot", "()Z");
Label l2 = new Label();
mv.visitJumpInsn(IFNE, l2);
mv.visitInsn(ICONST_1);
Label l3 = new Label();
mv.visitJumpInsn(GOTO, l3);
mv.visitLabel(l2);
mv.visitFrame(Opcodes.F_NEW, 2, new Object[] {"Parser", Opcodes.INTEGER}, 0, new Object[] {});
mv.visitInsn(ICONST_0);
mv.visitLabel(l3);
mv.visitFrame(Opcodes.F_NEW, 2, new Object[] {"Parser", Opcodes.INTEGER}, 1, new Object[] {Opcodes.INTEGER});
mv.visitVarInsn(ISTORE, 2);
Label l4 = new Label();
mv.visitLabel(l4);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ILOAD, 1);
mv.visitFieldInsn(PUTFIELD, "Parser", "pos", "I");
mv.visitVarInsn(ILOAD, 2);
mv.visitInsn(IRETURN);
Label l5 = new Label();
mv.visitLabel(l5);
mv.visitLocalVariable("this", "LParser;", null, l0, l5, 0);
mv.visitLocalVariable("at", "I", null, l1, l5, 1);
mv.visitLocalVariable("b", "Z", null, l4, l5, 2);
mv.visitMaxs(2, 3);
mv.visitEnd();
}
cw.visitEnd();

return cw.toByteArray();
}
}
